//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly Assets.Scripts.Components.GameBoard.MoveableComponent assetsScriptsComponentsGameBoardMoveableComponent = new Assets.Scripts.Components.GameBoard.MoveableComponent();

    public bool isAssetsScriptsComponentsGameBoardMoveable {
        get { return HasComponent(GameComponentsLookup.AssetsScriptsComponentsGameBoardMoveable); }
        set {
            if(value != isAssetsScriptsComponentsGameBoardMoveable) {
                if(value) {
                    AddComponent(GameComponentsLookup.AssetsScriptsComponentsGameBoardMoveable, assetsScriptsComponentsGameBoardMoveableComponent);
                } else {
                    RemoveComponent(GameComponentsLookup.AssetsScriptsComponentsGameBoardMoveable);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.MatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAssetsScriptsComponentsGameBoardMoveable;

    public static Entitas.IMatcher<GameEntity> AssetsScriptsComponentsGameBoardMoveable {
        get {
            if(_matcherAssetsScriptsComponentsGameBoardMoveable == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AssetsScriptsComponentsGameBoardMoveable);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAssetsScriptsComponentsGameBoardMoveable = matcher;
            }

            return _matcherAssetsScriptsComponentsGameBoardMoveable;
        }
    }
}
