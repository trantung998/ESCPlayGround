//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly Assets.Scripts.Components.GameInput.InteractiveComponent assetsScriptsComponentsGameInputInteractiveComponent = new Assets.Scripts.Components.GameInput.InteractiveComponent();

    public bool isAssetsScriptsComponentsGameInputInteractive {
        get { return HasComponent(GameComponentsLookup.AssetsScriptsComponentsGameInputInteractive); }
        set {
            if(value != isAssetsScriptsComponentsGameInputInteractive) {
                if(value) {
                    AddComponent(GameComponentsLookup.AssetsScriptsComponentsGameInputInteractive, assetsScriptsComponentsGameInputInteractiveComponent);
                } else {
                    RemoveComponent(GameComponentsLookup.AssetsScriptsComponentsGameInputInteractive);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.MatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAssetsScriptsComponentsGameInputInteractive;

    public static Entitas.IMatcher<GameEntity> AssetsScriptsComponentsGameInputInteractive {
        get {
            if(_matcherAssetsScriptsComponentsGameInputInteractive == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AssetsScriptsComponentsGameInputInteractive);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAssetsScriptsComponentsGameInputInteractive = matcher;
            }

            return _matcherAssetsScriptsComponentsGameInputInteractive;
        }
    }
}
